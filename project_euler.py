class ProjectEuler:

    def problem_one(self, n):
        """
        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
        """
        # set initial numbers
        i = 0
        answer = 0
        # as long as i is below N (10, 1000, etc)
        # if it's divisible by 3 or 5
        # add that number with the answer
        while i < n:
            if i % 3 == 0 or i % 5 == 0:
                answer += i
            i += 1

        return answer
    
    def problem_two(self, n):
        """
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        """
        # set intial fibonacci numbers
        fibonacci = [0, 1]
        while fibonacci[-1] < n:
            fibonacci.append(fibonacci[-2] + fibonacci[-1])
        
        # use list comprehension to even select fibonacci numbers
        # then add all of them
        even = [x for x in fibonacci if x % 2 == 0]
        even = sum(even)
        
        return even

    def problem_three(self, n):
        """
        The prime factors of 13195 are 5, 7, 13 and 29.

        What is the largest prime factor of the number 600851475143?
        """
        # n is the number whose prime factors we would like to search for
        # in this case, it's either 13195 or 600851475143
        # we don't want to iterate all over from 0 to n to get the primes
        # instead, we stop until the square root of n (it's enough, and faster)
        sqrt_n = int(n ** 0.5)
        def is_prime(x):
            """
            Returns whether a number is a prime or not
            """
            sqrt_n = int(x ** 0.5)
            for i in range(2, sqrt_n + 1):
                if x % i == 0:
                    return False
            return True
        
        # use list comprehension to find the largest prime factors of n
        answer = [x for x in range(2, sqrt_n) if is_prime(x) == True and n % x == 0]
        answer = max(answer)

        return answer
